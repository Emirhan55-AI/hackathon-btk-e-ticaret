from sqlalchemy import Column, String, DateTime, ForeignKey, Text, Boolean
from sqlalchemy.dialects.postgresql import UUID, JSONB
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
import uuid
from app.core.database import Base


class Outfit(Base):
    """Outfit model for storing generated outfit recommendations."""
    
    __tablename__ = "outfits"
    
    id = Column(
        UUID(as_uuid=True),
        primary_key=True,
        default=uuid.uuid4,
        unique=True,
        nullable=False
    )
    
    user_id = Column(
        UUID(as_uuid=True),
        ForeignKey("users.id", ondelete="CASCADE"),
        nullable=False,
        index=True
    )
    
    name = Column(
        String(255),
        nullable=False
    )
    
    # Occasion for the outfit
    occasion = Column(
        String(100),
        nullable=True,
        index=True
    )
    
    # Season/weather
    season = Column(
        String(50),
        nullable=True
    )
    
    # Clothing item IDs that make up this outfit
    clothing_item_ids = Column(
        JSONB,
        nullable=False,
        default=list
    )
    
    # Style description or notes
    description = Column(
        Text,
        nullable=True
    )
    
    # AI-generated styling tips
    styling_tips = Column(
        JSONB,
        nullable=True,
        default=list
    )
    
    # User rating (1-5 stars)
    user_rating = Column(
        "user_rating",
        nullable=True
    )
    
    # Whether user marked as favorite
    is_favorite = Column(
        Boolean,
        default=False,
        nullable=False
    )
    
    # Whether outfit was generated by AI or manually created
    is_ai_generated = Column(
        Boolean,
        default=True,
        nullable=False
    )
    
    # Confidence score from AI recommendation (0-1)
    confidence_score = Column(
        "confidence_score",
        nullable=True
    )
    
    created_at = Column(
        DateTime(timezone=True),
        server_default=func.now(),
        nullable=False
    )
    
    updated_at = Column(
        DateTime(timezone=True),
        server_default=func.now(),
        onupdate=func.now(),
        nullable=False
    )
    
    # Relationships
    user = relationship("User", back_populates="outfits")
    
    def __repr__(self) -> str:
        return f"<Outfit(id={self.id}, name={self.name}, occasion={self.occasion})>"


class Recommendation(Base):
    """Recommendation model for storing AI-generated recommendations."""
    
    __tablename__ = "recommendations"
    
    id = Column(
        UUID(as_uuid=True),
        primary_key=True,
        default=uuid.uuid4,
        unique=True,
        nullable=False
    )
    
    user_id = Column(
        UUID(as_uuid=True),
        ForeignKey("users.id", ondelete="CASCADE"),
        nullable=False,
        index=True
    )
    
    # Recommendation data stored as JSONB
    outfit_data = Column(
        JSONB,
        nullable=False,
        default=dict
    )
    
    recommendation_type = Column(
        String(50),
        nullable=False,
        default="full_wardrobe"
    )
    
    confidence_score = Column(
        String(10),  # Store as string to avoid float precision issues
        nullable=False,
        default="0.0"
    )
    
    # Additional metadata
    meta_data = Column(
        JSONB,
        nullable=True,
        default=dict
    )
    
    # Timestamps
    created_at = Column(
        DateTime(timezone=True),
        server_default=func.now(),
        nullable=False
    )
    
    updated_at = Column(
        DateTime(timezone=True),
        server_default=func.now(),
        onupdate=func.now(),
        nullable=False
    )
    
    # Relationships
    user = relationship("User", back_populates="recommendations")
    
    def __repr__(self) -> str:
        return f"<Recommendation(id={self.id}, user_id={self.user_id}, type={self.recommendation_type})>"
